---
## tasks file for grub

- name: include assert.yml
  include_tasks: assert.yml
  run_once: yes

- name: install required packages
  package:
    name: "{{ grub_packages }}"
    state: present

# Detect grub path on /boot
# if not specified in input variables
# For Debian family, the path is usually /boot/grub
# For RedHat family, the path is usually /boo/grub2
- name: Detect grub path on /boot filesystem
  shell: "if [ -e /boot/grub -a -e /boot/grub2 ]; then echo -n '{{ '/boot/grub' if ansible_os_family == 'Debian' else '/boot2/grub' }}'; elif [ -e /boot/grub ]; then echo -n '/boot/grub'; elif [ -e /boot/grub2 ]; then echo -n '/boot/grub2'; else echo -n 'Unknown'; fi"
  register: result_boot_dir
  changed_when: false
  failed_when: result_boot_dir.stdout == 'Unknown'
  when: grub_boot_path is not defined

- name: Store result of previous task
  set_fact:
    grub_boot_path: "{{ grub_boot_path | default(result_boot_dir.stdout, true) }}"

# Detect grub cfg file on the system
# if not specified in input variables
- name: Get GRUB configuration file path
  shell: "if [ -e /sys/firmware/efi -a -e /boot/efi/EFI/{{ ansible_distribution | lower }}/grub.cfg ]; then echo -n '/boot/efi/EFI/{{ ansible_distribution | lower }}/grub.cfg'; elif [ -e {{ grub_boot_path }}/grub.cfg ]; then echo -n '{{ grub_boot_path }}/grub.cfg'; else echo -n 'Unknown'; fi"
  register: result_cfg_path
  changed_when: false
  failed_when: result_cfg_path.stdout == 'Unknown'
  when: grub_cfg_path is not defined

- name: Store result of previous task
  set_fact:
    grub_cfg_path: "{{ grub_cfg_path | default(result_cfg_path.stdout, true) }}"

- name: set GRUB_TIMEOUT
  lineinfile:
    path: "{{ grub_default_path }}"
    line: GRUB_TIMEOUT={{ grub_timeout }}
    create: yes
    mode: "0664"
  notify: update grub

- name: set GRUB_RECORDFAIL_TIMEOUT
  lineinfile:
    path: "{{ grub_default_path }}"
    line: GRUB_RECORDFAIL_TIMEOUT={{ grub_recordfail_timeout }}
    create: yes
    mode: "0664"
  notify: update grub

# Set grub password
- name: Ensure GRUB password is set on RedHat systems
  lineinfile:
    path:  "{{ grub_boot_path }}/user.cfg"
    regexp: '^GRUB2_PASSWORD='
    line: "GRUB2_PASSWORD={{ grub_password  }}"
    create: yes
  when: grubs_.password is defined and ansible_os_family == 'RedHat'
  notify: update grub

# Set grub password on Debian systems
- name: Ensure GRUB password is set on Debian
  blockinfile:
    path: /etc/grub.d/40_custom
    marker: "# {mark} ANSIBLE MANAGED BLOCK "
    create: yes
    state: present
    block: |
      set superusers="{{ grub_superuser }}"
      password_pbkdf2  {{ grub_superuser }} {{ grub_password }}
  when: grub_password is defined and ansible_os_family == 'Debian'
  notify: update grub

- name: Set unrestricted option on grub
  lineinfile:
    path: /etc/grub.d/10_linux
    regexp: 'CLASS="--class gnu-linux --class gnu --class os"'
    line: 'CLASS="--class gnu-linux --class gnu --class os --unrestricted"'
  when: grub_password is defined
  notify: update grub

- name: include options_mgmt.yml
  include_tasks: options_mgmt.yml

- name: flush handlers
  meta: flush_handlers

