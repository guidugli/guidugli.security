---

- name: Ensure samba packages are installed
  package:
    name: "{{ smb_packages }}"
    state: present
    update_cache: yes

- name: Enable services
  service:
    name: "{{ item }}"
    enabled: yes
  loop: "{{ smb_service_names }}"

- name: Copy configuration file to destination
  copy:
    src: "{{ smb_file }}"
    dest: "{{ smb_conf_dir }}/{{ smb_conf_file }}"
    owner: "{{ smb_owner }}"
    group: "{{ smb_group }}"
    mode: "{{ smb_mode }}"
    backup: yes
    force: yes
    validate: testparm -s %s
  when: smb_file is defined
  notify: restart samba

- name: Set selinux boolean values
  seboolean:
    name: "{{ smb_sebool_map[item] }}"
    state: "{{ vars[item] }}"
    persistent: yes
  when: 
    - vars[item] is defined
    - ansible_selinux.status is defined
    - ansible_selinux.status == 'enabled'
  loop:
    - smb_samba_export_all_ro
    - smb_samba_export_all_rw
    - smb_allow_smbd_anon_write
    - smb_enable_home_dirs
    - smb_create_home_dirs
    - smb_domain_controller
    - smb_share_fusefs
    - smb_virt_use_samba
    - smb_share_nfs
    - smb_run_unconfined
    - smb_portmapper
    - smb_use_samba_home_dirs
    - smb_sanlock_use_samba
  notify: restart samba

# Need another task file because it needs several
# tasks in a loop
- name: Adding users / update passwords
  include_tasks: smbadduser.yml
  when: smb_users is defined
  loop: "{{ smb_users }}"
  loop_control:
    label: "{{ item.name }}"

- name: Deleting users
  command: "smbpasswd -x {{ item }}"
  register: smb_cmd_result
  changed_when: smb_cmd_result.rc == 0
  failed_when: 
    - smb_cmd_result.rc != 0
    - smb_cmd_result.stdout is not search('Failed to find entry for user')
  loop: "{{ smb_users_remove }}"
  when: smb_users_remove is defined
