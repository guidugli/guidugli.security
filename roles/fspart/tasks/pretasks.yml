---
##
# This task file checks all the variables created to check amd configure system
# partition configuration. This validation and filtering can be disabled when importing
# this task file.
##

- name: Initialize variable
  set_fact:
    fspart_result: []

- name: Add missing information with default values
  set_fact:
    fspart_result: "{{ fspart_result | default([]) + [{ 'name': item.name | default('', true), 'mount_options': item.mount_options | default([]), 'validate_options': item.validate_options | default([]),'autofix': item.autofix | default(false), 'unit_name': item.unit_name }] }}"
  loop: "{{ partitions }}"

# This assertion checks all values that can be checked.
# Note that when the assertion fails, it tells which condition
# fails, so no need to create a distinct assertion for each
# field being evaluated.
# Not checking 'options' because it can vary a lot depending
# on the filesystem type. Maybe will add a checking in the future.
- name: Check if each partition information is valid.
  vars:
    pathre: '^(?:[\/])$|^(?:[\/][a-zA-Z0-9_.-]+)+[\/]?$'
  assert:
    quiet: yes
    that:
      - item.name is regex(pathre)  # Check if it is a directory
      - item.autofix | lower in ['true','false']
      - (item.autofix | bool and item.unit_name is defined) or not (item.autofix | bool)  # need unit file if autofixing it
      - (item.autofix | bool and item.mount_options is defined and item.mount_options | length > 0) or not (item.autofix | bool)
    msg: "Invalid value for {{ item.name }}"
  loop: "{{ fspart_result }}"
  loop_control:
    label: "{{ item.name }}"

# now overwrite partitions variable with the processed data
- name: Set final values to partitions variable
  set_fact:
    partitions: "{{ fspart_result }}"

