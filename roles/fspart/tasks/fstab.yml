---

# This file contains tasks to create/update entry in /etc/fstab
# When updating existing entry, the user do not need to provide
# src and fstype, as it will be retrieved from fstab file. But
# if the entry do not exist in fstab file and not all variables
# are present, then stop execution with error.

- name: Set variable to be used on notifications
  set_fact:
    fspart_mount_point: "{{ item.name }}"

- name: Check if entry already exists on fstab
  command: >
    grep -E '^[^#].*?\s+{{ item.name }}\s+' /etc/fstab
  register: fstab_cmd_result
  failed_when: fstab_cmd_result.stderr | length > 0
  changed_when: false

- name: If do not exist, create entry
  block:
    - name: Check if partition UUID was informed
      assert:
        that:
          - item.src is defined
          - item.src | length > 0
          - item.fstype is defined
          - item.fstype in fspart_allowed_fstype
        quiet: yes

    - name: Create entry in fstab
      mount:
        path: "{{ item.name }}"
        src: "{{ item.src }}"
        fstype: "{{ item.fstype }}"
        opts: "{{ item.mount_options | join(',') }}"
        state: mounted

  when: fstab_cmd_result.stdout | length == 0

- name: Entry exists, check options
  block:
    - name: Parse result into variables
      vars:
        fstab_cmd_result_split: "{{ fstab_cmd_result.stdout.split(' ') | reject('equalto','') | list }}"
      set_fact:
        fstab_src: "{{ fstab_cmd_result_split[0] }}"
        fstab_fstype: "{{ fstab_cmd_result_split[2] }}"
        fstab_options: "{{ fstab_cmd_result_split[3] }}"

    - name: "Ensure {{ item.name }} options are correct"
      mount:
        path: "{{ item.name }}"
        src: "{{ fstab_src }}"
        fstype: "{{ fstab_fstype }}"
        opts: "{{ item.mount_options | join(',') }}"
        state: mounted

  when: fstab_cmd_result.stdout | length > 0
