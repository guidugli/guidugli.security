---
##
# This task file checks all the variables created to customize the
# configuration of the packaging system and which packages to install
# based on the features enabled for the system.
##

- name: Check if these package_management 'yes','no','true','false' values are invalid
  assert:
    quiet: yes
    that:
      - (item.value | lower) in ['true','false']
    msg: "Invalid value for {{ item.key }}. Allowed values are 'yes', 'no', 'true', 'false'."
  loop: "{{ package_management | dict2items | selectattr('key', 'match', 'apk_upgrade_available|update_system|security_only|gpgcheck|disable_rhnsd') | list }}"

- name: Check integer variables
  assert:
    quiet: yes
    that:
      - item.value | int >= 0
    msg: "Invalid integer value for {{ item.key }}."
  loop: "{{ package_management | dict2items | selectattr('key', 'match', 'cache_valid_time') | list }}"

- name: Check if APT upgrade command is valid
  assert:
    quiet: yes
    that:
      - package_management.apt_upgrade_command in ['dist','full','safe','yes']
    msg: "Invalid value for upgrade_command. Valid values are 'dist','full','safe' and 'yes'"


#- name: Check if firewall selection is valid
#  assert:
#    quiet: yes
#    that:
#      - system_features.firewall_enabled and
#        (firewall_settings.firewall_package in ['firewalld','iptables']) or
#        (firewall_settings.firewall_package == 'ufw' and ansible_os_family == "Debian")
#    msg: "Firewall feature is enabled but firewall package name is invalid."

#- name: Add required packages based on feature selection
#  block:

#    - name: Add selinux packaged
#      set_fact:
#        feature_packages: "{{ feature_packages | default([]) + item.packages }}"
#      when: item.enabled
#      loop:
#        - { packages: "{{ package_name['selinux'][ansible_os_family] }}", enabled: "{{ system_features.selinux_enabled }}" }
#        - { packages: ['sudo'], enabled: "{{ system_features.sudo_enabled }}" }
#        - { packages: ['chrony'], enabled: "{{ system_features.chrony_enabled }}" }
#        - { packages: ['openssh-server'], enabled: "{{ system_features.ssh_enabled }}" }
#        - { packages: "{{ package_name['audit'][ansible_os_family] }}", enabled: "{{ system_features.audit_enabled }}" }
#        - { packages: ['rsyslog'], enabled: "{{ system_features.rsyslog_enabled }}" }
#        - { packages: ['aide'], enabled: "{{ system_features.aide_enabled }}" }
#        - { packages: "{{ package_name['iptables'][ansible_os_family] if (firewall_package == 'iptables') else [firewall_package] }}", enabled: "{{ system_features.firewall_enabled }}" }

#    - name: Add feature packages to package_management.install_packages variable
#      set_fact:
#        package_management: "{{ package_management | default([], true) | combine({'install_packages': feature_packages}) }}"


# There is no pre-defined/hard-coded package removal as admins might want to leave
# considered 'non-secure' software installed

