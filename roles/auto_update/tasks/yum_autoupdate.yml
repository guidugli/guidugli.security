---

# Run this first part only if auto update is not enabled
- name: Check if package is already installed
  block:
    - name: Gather the package facts
      package_facts:
        manager: rpm

    - name: Create variable to indicate if package is installed
      set_fact:
        au_auto_udpate_pkg_installed: "{{ 'yum-cron' in ansible_facts.packages }}"
  when: not au_enable_auto_update

- name: Install required package dnf-automatic
  yum:
    name: yum-cron
    state: present
  when: au_enable_auto_update

# This task will only run if auto enabled is enabled or if package already exists
- name: "{{ text }} yum-cron service"
  vars:
    text: "{{ 'Enable' if au_enable_auto_update else 'Disable' }}"
    newstate: "{{ 'started' if au_enable_auto_update else 'stopped' }}"
  systemd:
    name: yum-cron.service
    state: "{{ newstate }}"
    enabled: "{{ au_enable_auto_update }}"
  when: au_enable_auto_update or au_auto_udpate_pkg_installed

- name: Configure /etc/yum/yum-cron.conf
  ini_file:
    path: /etc/yum/yum-cron.conf
    section: "{{ item.section }}"
    option: "{{ item.key }}"
    value: "{{ item.value }}"
    mode: '0644'
  loop:
    - { section: commands, key: upgrade_cmd, value: "{{ 'security' if au_security_only else 'default' }}" }
    - { section: commands, key: download_updates, value: "yes" }
    - { section: commands, key: apply_updates, value: "{{ 'no' if au_download_only else 'yes' }}" }
    - { section: emitters, key: emit_via, value: "{{ au_emit_via }}" }
    - { section: email, key: email_from, value: "{{ au_email_from }}" }
    - { section: email, key: email_to, value: "{{ au_email_to }}" }
    - { section: email, key: email_host, value: "{{ au_email_server }}" }
  notify: restart yum-cron service
  when: au_enable_auto_update
