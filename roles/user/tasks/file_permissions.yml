---

- name: Ensure correct permission on critical system files
  file:
    path: "{{ item.name }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop: "{{ user_critical_files_perms[ansible_os_family] }}"
  loop_control:
    label: "{{ item.name }}"

# Check for files that any user can write.
# If any file is found, gives an error and stop.
- name: Ensure no world writable files exist
  block:
    - name: Find any world writiable files
      shell: "/usr/bin/df --local -P | /usr/bin/awk {' if (NR!=1) print $6'} | /usr/bin/xargs -I '{}' find '{}' -xdev -type f -perm -0002"
      register: user_cmd_result
      changed_when: false

    - name: Print any world writable files found
      debug:
        msg: "World writiable files found: {{ user_cmd_result.stdout }}"
      changed_when: false
      failed_when: true
      when: user_cmd_result.stdout
  tags:
    - check_world_writeable_files

# Ensure no unowned files exist
# Stop execution with failure if any exists
- name: Ensure no unowned files exist
  block:
    - name: Find any unowned files
      shell: "/usr/bin/df --local -P | /usr/bin/awk {' if (NR!=1) print $6'} | /usr/bin/xargs -I '{}' find '{}' -xdev -nouser"
      register: user_cmd_result
      changed_when: false

    - name: Print any unowned files found
      debug:
        msg: "unowned files found: {{ user_cmd_result.stdout }}"
      changed_when: false
      failed_when: true
      when: user_cmd_result.stdout
  tags:
    - check_unowned_files

# Ensure no ungrouped files exist
# Stop execution with failure if any exists
# On containers it is common to have devices
# under /dev without group
- name: Ensure no ungrouped files exist
  vars:
    iscontainer: "{{ ansible_virtualization_type in ['docker','lxc'] }}"
  block:
    - name: Find any ungrouped files
      shell: "/usr/bin/df --local -P | /usr/bin/awk {' if (NR!=1) print $6'} | {{ 'grep -vE ^/dev$ |' if iscontainer}} /usr/bin/xargs -I '{}' find '{}' -xdev -nogroup"
      register: user_cmd_result
      changed_when: false

    - name: Print any ungrouped files found
      debug:
        msg: "ungrouped files found: {{ user_cmd_result.stdout }}"
      changed_when: false
      failed_when: true
      when: user_cmd_result.stdout
  tags:
    - check_ungrouped_files

# Will just show a list of SUID files
# for the user to manually review
- name: List SUID files
  block:
    - name: Find any SUID files
      shell: "df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -4000 2>/dev/null"
      register: user_cmd_result
      changed_when: false
      failed_when: false

    - name: Print any SUID files found
      debug:
        msg: "SUID files found: {{ user_cmd_result.stdout_lines }}"
      changed_when: false
      failed_when: false
      when: user_cmd_result.stdout
  tags:
    - show_suid_files

# Will just show a list of SGID files
# for the user to manually review
- name: List SGID files
  block:
    - name: Find any SGID files
      shell: "df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -2000 2>/dev/null"
      register: user_cmd_result
      changed_when: false
      failed_when: false

    - name: Print any SGID files found
      debug:
        msg: "SUID files found: {{ user_cmd_result.stdout_lines }}"
      changed_when: false
      failed_when: false
      when: user_cmd_result.stdout
  tags:
    - show_sgid_files

